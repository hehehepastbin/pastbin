def extract_modifications(directory, csv_file):
    """ Extract modifications and save them to a CSV file and detailed txt files. """
    try:
        # Open CSV file to write modifications
        with open(csv_file, 'w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(['File Path', 'Start Line', 'End Line', 'Status', 'Author'])

            # Get the svn diff for the directory
            proc = subprocess.Popen(['svn', 'diff', directory], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = proc.communicate()

            if proc.returncode != 0:
                print("Error:", err.decode())
                return
            
            modifications = {}
            file_lines = {}
            current_file = None
            collecting = False
            original_lines = []
            modified_lines = []

            # Parse svn diff output
            lines = out.decode().split('\n')
            for line in lines:
                if line.startswith('Index:'):
                    if current_file and current_file in modifications:
                        # Save the last collected modifications before changing the file
                        modifications[current_file].append((start_line, end_line, original_lines, modified_lines))
                    # Reset for new file
                    current_file = line.split(':')[1].strip()
                    modifications[current_file] = []
                    start_line = end_line = None
                    original_lines = []
                    modified_lines = []
                    collecting = False
                elif line.startswith('@@'):
                    if current_file and start_line is not None and end_line is not None:
                        modifications[current_file].append((start_line, end_line, original_lines, modified_lines))
                    # Parse @@ -1,3 +4,7 @@ format to find line numbers
                    parts = line.split(' ')
                    start_line = int(parts[2].split(',')[0][1:])
                    end_line = start_line + int(parts[2].split(',')[1]) - 1 if ',' in parts[2] else start_line
                    original_lines = []
                    modified_lines = []
                    collecting = True
                elif collecting:
                    if line.startswith('-'):
                        original_lines.append(line[1:])
                    elif line.startswith('+'):
                        modified_lines.append(line[1:])
            
            # Write last file's modifications
            if current_file and start_line is not None and end_line is not None:
                modifications[current_file].append((start_line, end_line, original_lines, modified_lines))

            # Write modifications to CSV and export to txt files
            for file_path, mods in modifications.items():
                for mod in mods:
                    writer.writerow([file_path, mod[0], mod[1], 'Failed', 'bulat.khasanov'])
                export_modification(file_path, mods, directory)

            print(f"Modifications written to {csv_file}")
    except Exception as e:
        print(f"Error extracting modifications: {e}")

def export_modification(file_path, modifications, directory):
    """ Export each modification to a txt file. """
    try:
        # Find starting position of the required prefix in the file path
        idx = file_path.find("ApplicationSW\\Config\\Generated_A")
        if idx != -1:
            modified_file_path = file_path[idx:]
        else:
            modified_file_path = file_path

        txt_file_name = f"{modified_file_path.replace('\\', '_')}.txt"
        with open(os.path.join(directory, txt_file_name), 'w', encoding='utf-8') as txt_file:
            txt_file.write(f"File: {file_path}\n")
            for mod in modifications:
                txt_file.write(f"Start Line: {mod[0]}, End Line: {mod[1]}\n")
                txt_file.write("Original content here...\n")
                txt_file.writelines(f"- {line}\n" for line in mod[2])
                txt_file.write("Modified content here...\n")
                txt_file.writelines(f"+ {line}\n" for line in mod[3])
        print(f"Modification exported to {txt_file_name}")
    except Exception as e:
        print(f"Error exporting modification: {e}")
