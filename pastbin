def extract_modifications(directory, csv_file):
    """ Extract modifications and save them to a CSV file and text files with details. """
    try:
        # Open CSV file to write modifications
        with open(csv_file, 'w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow(['File Path', 'Start Line', 'End Line', 'Status', 'Author'])

            # Get the svn diff for the directory
            proc = subprocess.Popen(['svn', 'diff', directory], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = proc.communicate()

            if proc.returncode != 0:
                print("Error:", err.decode())
                return
            
            lines = out.decode().split('\n')
            current_file = None
            modifications = []
            original_content = []
            modified_content = []
            collecting = False

            # Parse svn diff output
            for line in lines:
                if line.startswith('Index:'):
                    if current_file and modifications:
                        export_modification(current_file, modifications, original_content, modified_content, directory)
                        modifications = []
                        original_content = []
                        modified_content = []
                    current_file = line.split(':')[1].strip()
                elif line.startswith('@@'):
                    # Parse @@ -1,3 +4,7 @@ format to find line numbers
                    parts = line.split(' ')
                    start_line = int(parts[2].split(',')[0][1:])
                    end_line = start_line + int(parts[2].split(',')[1]) - 1
                    modifications.append((start_line, end_line))
                    collecting = True
                elif collecting:
                    if line.startswith('-'):
                        original_content.append(line[1:].strip())
                    elif line.startswith('+'):
                        modified_content.append(line[1:].strip())
                    elif line == '':
                        collecting = False
            
            # Final export if any
            if current_file and modifications:
                export_modification(current_file, modifications, original_content, modified_content, directory)

            print(f"Modifications written to {csv_file}")
    except Exception as e:
        print(f"Error extracting modifications: {e}")

def export_modification(file_path, modifications, original_content, modified_content, directory):
    """ Export each modification to a single txt file for each file. """
    try:
        base_name = file_path[file_path.find("ApplicationSW\\Config\\Generated_A"):]
        txt_file_name = f"{base_name}.txt"
        with open(os.path.join(directory, txt_file_name), 'w', encoding='utf-8') as txt_file:
            txt_file.write(f"{file_path}\n")
            for (start_line, end_line) in modifications:
                txt_file.write(f"Start Line: {start_line}, End Line: {end_line}\n")
            txt_file.write("Original content here...\n")
            txt_file.writelines(original_content)
            txt_file.write("\nModified content here...\n")
            txt_file.writelines(modified_content)
        print(f"Modification exported to {txt_file_name}")
    except Exception as e:
        print(f"Error exporting modification: {e}")

# This updated version groups modifications by file, collects the specific lines changed,
# and exports them into a single text file per file. Additionally, the naming of files now starts with the specified path.



I've never done integration tasks and feel I lack sufficient experience working with AA, which could lead to additional time spent clarifying various aspects. I think 5 hours for each aspect should be sufficient
